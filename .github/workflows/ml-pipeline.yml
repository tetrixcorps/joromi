name: ML Services Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: registry.digitalocean.com
  TEST_TAG: test
  PROD_TAG: latest

environments:
  staging:
    name: staging
  production:
    name: production

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Run Tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest tests/

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    environment: staging
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - name: Deploy to Staging
        run: |
          echo "Deploying to staging..."

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - name: Deploy to Production
        run: |
          echo "Deploying to production..."

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, ml-service, websocket-service]
    steps:
      - uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DO Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ env.TEST_TAG }}
            ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ github.sha }}

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Configure DO Token
        run: |
          echo "do_token = \"${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}\"" > terraform.tfvars
          echo "environment = \"staging\"" >> terraform.tfvars

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve

  integration-tests:
    needs: deploy-staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Run E2E Tests
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio httpx
          pytest tests/e2e/

  deploy-production:
    needs: integration-tests
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Update production tags
        run: |
          for service in api-gateway ml-service websocket-service; do
            doctl registry repository tag-update \
              ${{ github.repository }}/$service:${{ env.TEST_TAG }} \
              ${{ env.PROD_TAG }}
          done

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Configure DO Token
        run: |
          echo "do_token = \"${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}\"" > terraform.tfvars
          echo "environment = \"prod\"" >> terraform.tfvars

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve 